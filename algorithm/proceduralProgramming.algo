//procedure declaration
PROCEDURE dot_product(Vector1,vector2 : ARRAY_OF FLOAT  ,VAR ps:FLOAT)
    VAR
        i:INTEGER;
    BEGIN
        FOR i FROM 0 TO Vector1.length -1  STEP 1  DO
            ps := ps + Vector1[i]*vector2[i];
        END_FOR
    END

FUNCTION dotProduct(Vector1,Vector2 : ARRAY_OF FLOAT) : FLOAT
VAR
    i:INTEGER;
    x : FLOAT;
BEGIN
    FOR i FROM 0 TO Vector1.length -1  STEP 1  DO
            x := x + Vector1[i]*vector2[i];
        END_FOR
    RETURN x ;
END


ALGORITHM Dot product
VAR
    Mat : ARRAY_OF FLOAT[][];
    i,j,k,L,C :INTEGER;
    ps : FLOAT;

BEGIN
    REPEAT
        Read(L)
    UNTIL (L > 0 AND L % 2 = 0)
    
    REPEAT
        Read(C)
    UNTIL (L > 1)

    FOR i FROM 0 TO L-1 STEP 1  DO
        FOR j FROM 0 TO C-1 STEP 1  DO
            Read(Mat[L][C])
        END_FOR
    END_FOR

    FOR k FROM 0 TO L-1 STEP 2  DO
        dot_product(Mat[k],Mat[k+1],ps);
        ps := dotProduct(Mat[K],Mat[k+1]);
        IF (ps = 0) THEN
        Write("the given vectors are orthogonal");
        ELSE 
        Write("the given vectors are not orthogonal");
        END_IF 

    END_FOR
       
END